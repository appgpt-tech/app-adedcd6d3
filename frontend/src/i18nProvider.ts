//Source code generated by AppGPT (www.appgpt.tech)
import { mergeTranslations } from 'ra-core';
import polyglotI18nProvider from 'ra-i18n-polyglot';
import enOriginal from 'ra-language-english';
import frOriginal from 'ra-language-french';
import grOriginal from 'ra-language-greek';

const enResources = {
  resources: {
    User: {
      name: 'User',
      fields: { id: 'Id', name: 'Name', email: 'Email', password: 'Password' },
    },
    Expense: {
      name: 'Expense',
      fields: {
        id: 'Id',
        amount: 'Amount',
        date: 'Date',
        description: 'Description',
        categoryId: 'Category Id',
        bankAccountId: 'Bank Account Id',
      },
    },
    Bankaccount: {
      name: 'Bank Account',
      fields: {
        id: 'Id',
        bankName: 'Bank Name',
        accountNumber: 'Account Number',
      },
    },
    Smsmessage: {
      name: 'Smsmessage',
      fields: {
        id: 'Id',
        sender: 'Sender',
        messageBody: 'Message Body',
        receivedAt: 'Received At',
        processed: 'Processed',
      },
    },
    Category: {
      name: 'Category',
      fields: { id: 'Id', name: 'Name', description: 'Description' },
    },
  },
};
const frResources = {
  resources: {
    User: {
      name: 'User (fr)',
      fields: {
        id: 'Id (fr)',
        name: 'Name (fr)',
        email: 'Email (fr)',
        password: 'Password (fr)',
      },
    },
    Expense: {
      name: 'Expense (fr)',
      fields: {
        id: 'Id (fr)',
        amount: 'Amount (fr)',
        date: 'Date (fr)',
        description: 'Description (fr)',
        categoryId: 'Category Id (fr)',
        bankAccountId: 'Bank Account Id (fr)',
      },
    },
    Bankaccount: {
      name: 'Bank Account (fr)',
      fields: {
        id: 'Id (fr)',
        bankName: 'Bank Name (fr)',
        accountNumber: 'Account Number (fr)',
      },
    },
    Smsmessage: {
      name: 'Smsmessage (fr)',
      fields: {
        id: 'Id (fr)',
        sender: 'Sender (fr)',
        messageBody: 'Message Body (fr)',
        receivedAt: 'Received At (fr)',
        processed: 'Processed (fr)',
      },
    },
    Category: {
      name: 'Category (fr)',
      fields: {
        id: 'Id (fr)',
        name: 'Name (fr)',
        description: 'Description (fr)',
      },
    },
  },
};
const grResources = {
  resources: {
    User: {
      name: 'User (gr)',
      fields: {
        id: 'Id (gr)',
        name: 'Name (gr)',
        email: 'Email (gr)',
        password: 'Password (gr)',
      },
    },
    Expense: {
      name: 'Expense (gr)',
      fields: {
        id: 'Id (gr)',
        amount: 'Amount (gr)',
        date: 'Date (gr)',
        description: 'Description (gr)',
        categoryId: 'Category Id (gr)',
        bankAccountId: 'Bank Account Id (gr)',
      },
    },
    Bankaccount: {
      name: 'Bank Account (gr)',
      fields: {
        id: 'Id (gr)',
        bankName: 'Bank Name (gr)',
        accountNumber: 'Account Number (gr)',
      },
    },
    Smsmessage: {
      name: 'Smsmessage (gr)',
      fields: {
        id: 'Id (gr)',
        sender: 'Sender (gr)',
        messageBody: 'Message Body (gr)',
        receivedAt: 'Received At (gr)',
        processed: 'Processed (gr)',
      },
    },
    Category: {
      name: 'Category (gr)',
      fields: {
        id: 'Id (gr)',
        name: 'Name (gr)',
        description: 'Description (gr)',
      },
    },
  },
};

const en = mergeTranslations(enOriginal, enResources);
const fr = mergeTranslations(frOriginal, frResources);
const gr = mergeTranslations(grOriginal, grResources);

const translations = { en, fr, gr };
export const i18nProvider = polyglotI18nProvider(
  (locale) => translations[locale],
  'en', //default locale
  [
    { locale: 'en', name: 'English' },
    { locale: 'fr', name: 'Français' },
    { locale: 'gr', name: 'Ελληνικά' },
  ],
);
